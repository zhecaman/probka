from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from config import TOKEN
from db import BotDB
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging 
import time 


logging.basicConfig(filename='logs.txt', level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
storage = MemoryStorage()
bot = Bot(token=TOKEN)
database = BotDB('probka.db')
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await message.answer('–Ø-–±–æ—Ç –ü—Ä–æ–±–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –∫–æ–Ω–∫—É—Ä—Å–µ.'
                        '–ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π –º–æ–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –≤—Å–µ –±—É–¥–µ—Ç –û–ö. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start\n'
                        '–ï—Å–ª–∏ —è —Å–ª–æ–º–∞—é—Å—å, –Ω–∞–ø–∏—à–∏ —Ä–µ–±—è—Ç–∞–º –∏–∑ @probka_shop33')



@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    tg_id = message.from_user.id
    if database.user_exists_tg(tg_id):
            await bot.send_message(message.chat.id, '–¢—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—à—å! –ü–æ—Ç–µ—Ä–ø–∏.')
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        reg_button = types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å", request_contact=True)
        keyboard.add(reg_button)
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç!\n–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n'
                             '–¢–∞–∫ —è –±—É–¥—É –∑–Ω–∞—Ç—å, —á—Ç–æ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –¥–∞–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ', reply_markup=keyboard)
    


@dp.message_handler(commands=['condition'])
async def giveaway_conditions(message: types.Message):
    await bot.send_message(message.chat.id, '–£—Å–ª–æ–≤–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞:\n'
                           '–ü–æ–∫—É–ø–∞–π –≤ –ü—Ä–æ–±–∫–µ –Ω–∞ —Å—É–º–º—É –æ—Ç 1000 —Ä—É–±–ª–µ–π,\n'
                           '–ü–æ–ª—É—á–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –º–Ω–µ\n'
                           '–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª.\n'
                           '–í—Å—ë! ')


@dp.message_handler(content_types=['contact'])
async def contact(message: types.Message, state:FSMContext):
    if message.contact is not None:
        phone_num = message.contact['phone_number']
        keyboard = types.ReplyKeyboardRemove()
        if not database.user_exists_phone(phone_num):
            await bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, —Ç–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.\n'
                                   '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–∏–≤–∞ –≤ –ü—Ä–æ–±–∫–µ –Ω–∞ 700+ —Ä—É–±–ª–µ–π.'
                                   '–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—à—å —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ :)', reply_markup=keyboard)
        else:
            await state.update_data(
                {'phone_num': phone_num}
                )
            await message.answer(f'C–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä {phone_num} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', reply_markup=keyboard)
            await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ü—Ä–æ–±–∫–µ.')
    else:
        await bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, –Ω–æ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —è –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—á–∞–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–µ. ')
    




    
@dp.message_handler(regexp=r'^[0-9]{5,6}$')
async def id_code(message: types.Message, state: FSMContext):
    data =  await state.get_data()
    phone_num = data.get('phone_num')
    id_code = message.text
    db_id_code = str(database.get_id_code(phone_num))
    tg_id = message.from_user.id
    nickname = message.from_user.username
    if id_code == db_id_code:
        
        try:
            await bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—è—é...')
            database.add_nickname(nickname, phone_num)
            database.add_tg_id(tg_id, phone_num)
            await bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –¢–µ–ø–µ—Ä—å –∂–¥–∏ –∏—Ç–æ–≥–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.')
            await state.finish()
        except Exception as e:
            await bot.send_message(message.chat.id, f'–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫((( {e}')
    else:
        await bot.send_message(message.chat.id, f'–î–ª—è –Ω–æ–º–µ—Ä–∞ {phone_num} –≤ –º–æ–µ–π –±–∞–∑–µ –¥—Ä—É–≥–æ–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
    
@dp.message_handler(commands=['allusers'])
async def all_users(message: types.Message):

    users = database.all_users()
    await bot.send_message(message.chat.id, f'–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {users}')        


@dp.message_handler(content_types='any')
async def any_else(message: types.Message):
    await bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é.')



if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        time.sleep(3)
        print(e)


